class DioFactory {
  static final DioFactory _singleton = DioFactory._internal();
  Dio? dio;

  DioFactory._internal() {
    dio = Dio();

    dio!.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) async {
        // Add access token from storage to request headers
        final token = await AppStorage().getString(USER_TOKEN);
        if (token != null) {
          options.headers["Authorization"] = "Bearer $token";
        }
        return handler.next(options);
      },
      onResponse: (response, handler) {
        return handler.next(response); // Continue with the response
      },
      onError: (DioError error, handler) async {
        // If 401 error, refresh the token
        if (error.response?.statusCode == 401) {
          try {
            await _refreshToken();
            // Retry the failed request
            final retryResponse = await dio!.request(
              error.requestOptions.path,
              options: Options(
                method: error.requestOptions.method,
                headers: error.requestOptions.headers,
              ),
              data: error.requestOptions.data,
              queryParameters: error.requestOptions.queryParameters,
            );
            return handler.resolve(retryResponse);
          } catch (e) {
            return handler.reject(error);
          }
        }
        return handler.next(error); // Pass other errors
      },
    ));
  }

  factory DioFactory() => _singleton;

  Dio getDio() => dio!;

  Future<void> _refreshToken() async {
    final refreshToken = await AppStorage().getString(REFRESH_TOKEN);
    if (refreshToken == null) {
      throw Exception("No refresh token available");
    }

    final response = await dio!.post(
      ApiServiceUrls.refreshToken,
      data: {"refreshToken": refreshToken},
    );

    if (response.statusCode == 200) {
      final newAccessToken = response.data['accessToken'];
      final newRefreshToken = response.data['refreshToken'];

      // Update the tokens in storage
      await AppStorage().setString(USER_TOKEN, newAccessToken);
      await AppStorage().setString(REFRESH_TOKEN, newRefreshToken);
    } else {
      throw Exception("Failed to refresh token");
    }
  }
}
